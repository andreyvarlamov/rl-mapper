#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <time.h>

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#define STB_IMAGE_IMPLEMENTATION
#include <stb_image.h>
#include <cglm/cglm.h>

#define ATLAS_COLS 16
#define ATLAS_ROWS 16

#define SCREEN_TILE_SIZE 24
#define SCREEN_COLS 50
#define SCREEN_ROWS 30

#define MAP_COLS 100
#define MAP_ROWS 100

static bool keys[1024];

typedef GLuint TexID;
typedef GLuint ShaderID;
typedef GLuint VaoID;
typedef GLuint VboID;

typedef struct RenderData
{
    TexID atlas;
    ShaderID shader;
    VaoID vao;
} RenderData;

static RenderData _render_data;

char *_read_file(const char *path)
{
    FILE *f;
    long len;
    char* content;

    f = fopen(path, "rb");
    if (!f)
    {
        printf("Could not open file at %s\n", path);
        exit(-1);
    }

    fseek(f, 0, SEEK_END);
    len = ftell(f);
    fseek(f, 0, SEEK_SET);
    content = (char*) calloc(1, len+1);
    fread(content, 1, len, f);
    content[len] = 0;
    fclose(f);

    return content;
}

static TexID _load_texture(const char *path)
{
    int width, height, nr_channels;
    unsigned char *data = stbi_load(path, &width, &height, &nr_channels, 0);

    TexID tex_id;
    glGenTextures(1, &tex_id);
    glBindTexture(GL_TEXTURE_2D, tex_id);
    glTexImage2D(
        GL_TEXTURE_2D, 0, GL_RGBA, width, height,
        0, GL_RGBA, GL_UNSIGNED_BYTE,
        data
    );

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    glBindTexture(GL_TEXTURE_2D, 0);

    stbi_image_free(data);

    return tex_id;
}

static ShaderID _load_shader(const char *v_path, const char *f_path)
{
    const char *v_content = _read_file(v_path);
    const char *f_content = _read_file(f_path);

    GLuint vertex = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertex, 1, &v_content, NULL);
    glCompileShader(vertex);
    int v_success;
    char v_log[1024];
    glGetShaderiv(vertex, GL_COMPILE_STATUS, &v_success);
    if (!v_success)
    {
        glGetShaderInfoLog(vertex, 1024, NULL, v_log);
        printf("ERROR::SHADER: Compile-time error: Vertex\n%s\n", v_log);
    }

    GLuint frag = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(frag, 1, &f_content, NULL);
    glCompileShader(frag);
    int f_success;
    char f_log[1024];
    glGetShaderiv(frag, GL_COMPILE_STATUS, &f_success);
    if (!f_success)
    {
        glGetShaderInfoLog(frag, 1024, NULL, f_log);
        printf("ERROR::SHADER: Compile-time error: Fragment\n%s\n", f_log);
    }

    ShaderID shader = glCreateProgram();
    glAttachShader(shader, vertex);
    glAttachShader(shader, frag);
    glLinkProgram(shader);
    int success;
    char log[1024];
    glGetProgramiv(shader, GL_LINK_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(shader, 1024, NULL, log);
        printf("ERROR::SHADER: Link-time error:\n%s\n", log);
    }

    glDeleteShader(vertex);
    glDeleteShader(frag);

    free((void *)v_content);
    free((void *)f_content);

    return shader;
}

void _load_resources()
{
    _render_data.atlas = resource_load_texture("res/texture/cp437_rgba.png");
    _render_data.shader = resource_load_shader("res/shaders/atlas.vs", "res/shaders/atlas.fs");
}

void _init_vao()
{
    VboID vbo;
    float vertices[] = {
        // pos      // tex
        0.0f, 1.0f, 0.0f, 1.0f,
        1.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 0.0f,

        0.0f, 1.0f, 0.0f, 1.0f,
        1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, 0.0f, 1.0f, 0.0f,
    };

    glGenVertexArrays(1, &_render_data.vao);
    glGenBuffers(1, &vbo);

    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBindVertexArray(_render_data.vao);

    glBufferData(
        GL_ARRAY_BUFFER,
        sizeof(vertices), vertices,
        GL_STATIC_DRAW
    );
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(
        0, 4, GL_FLOAT, GL_FALSE,
        4 * sizeof(float), (void *) 0
    );

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

void render_prepare_shader()
{
    glUseProgram(_render_data.shader);

    mat4 projection;
    glm_ortho(0.0f,
              ( float ) SCREEN_COLS * SCREEN_TILE_SIZE,
              ( float ) SCREEN_ROWS * SCREEN_TILE_SIZE,
              0.0f, -1.0f, 1.0f, projection);

    glUniformMatrix4fv(glGetUniformLocation(_render_data.shader, "projection"),
                       1, GL_FALSE, (float *) projection);

    glUniform1f(glGetUniformLocation(_render_data.shader, "screen_tile_width"),
                (float) SCREEN_TILE_SIZE);

    glUniform1f(glGetUniformLocation(_render_data.shader, "atlas_cols"),
                (float) ATLAS_COLS);
    
    glUniform1i(glGetUniformLocation(_render_data.shader, "image"), 0);

    glUseProgram(0);
}

void render_prepare_render()
{
    glUseProgram(_render_data.shader);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, _render_data.atlas);
    glBindVertexArray(_render_data.vao);
}

void render_clean_render()
{
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, 0);
    glBindVertexArray(0);
    glUseProgram(0);
}

static GLFWwindow *_init_window(GLFWkeyfun key_callback, int screen_width, int screen_height)
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, false);

    GLFWwindow *window = glfwCreateWindow(screen_width, screen_height, "RL Mapper", 0, 0);

    glfwMakeContextCurrent(window);

    gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

    glfwSetKeyCallback(window, key_callback);

    glViewport(0, 0, screen_width, screen_height);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    return window;
}

static void _key_callback(GLFWwindow *window, int key, int scancode, int action, int mode)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_REPEAT)
    {
        glfwSetWindowShouldClose(window, true);
    }
    else if (key >= 0 && key < 1024)
    {
        if (action == GLFW_PRESS || action == GLFW_REPEAT)
        {
            keys[key] = true;
        }
        else if (action == GLFW_RELEASE)
        {
            keys[key] = false;
        }
    }
}

int main()
{
    int window_width = SCREEN_TILE_SIZE * SCREEN_COLS;
    int window_height = SCREEN_TILE_SIZE * SCREEN_ROWS;
    GLFWwindow *window = _init_window(_key_callback, window_width, window_height);
    return 0;
}